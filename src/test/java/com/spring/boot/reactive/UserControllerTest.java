package com.spring.boot.reactive;

import com.spring.boot.reactive.model.User;
import com.spring.boot.reactive.repository.UserRepository;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("dev")
@Slf4j
public class UserControllerTest {

	@Autowired
	private WebTestClient webTestClient;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private DatabaseClient databaseClient;

	private List<User> getData() {
		return Arrays.asList(new User(null, "Spring User 1", 30, 120000), new User(null, "Spring User 2", 5, 130000),
				new User(null, "Spring User 3", 40, 140000));
	}

	@BeforeEach
	public void setup() {
		List<String> statements = Arrays.asList("DROP TABLE IF EXISTS users ;",
				"CREATE TABLE users ( id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100) NOT NULL, age integer,salary decimal);");

		statements.forEach(it -> databaseClient.execute(it).fetch().rowsUpdated().block());

		userRepository.deleteAll().thenMany(Flux.fromIterable(getData())).flatMap(userRepository::save)
				.doOnNext(user -> {
					System.out.println("User Inserted from UserControllerTest: " + user);
				}).blockLast();

	}

	@Test
	public void getAllUsersValidateCount() {
		webTestClient.get().uri("/users").exchange().expectStatus().isOk().expectHeader()
				.contentType(MediaType.APPLICATION_JSON_VALUE).expectBodyList(User.class).hasSize(3)
				.consumeWith(user -> {
					List<User> users = user.getResponseBody();
					users.forEach(u -> {
						assertTrue(u.getId() != null);
					});
				});
	}

	@Test
	public void getAllUsersValidateResponse() {
		Flux<User> userFlux = webTestClient.get().uri("/users").exchange().expectStatus().isOk().expectHeader()
				.contentType(MediaType.APPLICATION_JSON_VALUE).returnResult(User.class).getResponseBody();
		StepVerifier.create(userFlux.log("Receiving values !!!")).expectNextCount(3).verifyComplete();

	}

	@Test
	public void getUserById() {
		webTestClient.get().uri("/users".concat("/{userId}"), "1").exchange().expectStatus().isOk().expectBody()
				.jsonPath("$.name", "Suman Das");
	}

	@Test
	public void getUserById_NotFound() {
		webTestClient.get().uri("/users".concat("/{userId}"), "6").exchange().expectStatus().isNotFound();
	}

	@Test
	public void createUser() {
		User user = new User(null, "Spring User 1", 45, 5555555);
		webTestClient.post().uri("/users").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
				.body(Mono.just(user), User.class).exchange().expectStatus().isCreated().expectBody().jsonPath("$.id")
				.isNotEmpty().jsonPath("$.name").isEqualTo("Spring User 1");
	}

	@Test
	public void deleteUser() {
		webTestClient.delete().uri("/users".concat("/{userId}"), "1")
				.accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE)).exchange().expectStatus().isOk()
				.expectBody(Void.class);
	}

	@Test
	public void updateUser() {
		double newsalary = 12345;
		User user = new User(null, "Spring User 1", 31, newsalary);
		webTestClient.put().uri("/users".concat("/{userId}"), "1")
				.contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
				.accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE)).body(Mono.just(user), User.class)
				.exchange().expectStatus().isOk().expectBody().jsonPath("$.salary").isEqualTo(newsalary);
	}

	@Test
	public void updateUser_notFound() {
		double newsalary = 12345;
		User user = new User(null, "Spring User 1", 31, newsalary);
		webTestClient.put().uri("/users".concat("/{userId}"), "6")
				.contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
				.accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE)).body(Mono.just(user), User.class)
				.exchange().expectStatus().isBadRequest();
	}
	/*
	 * @Test public void testStreamUsers(){ setUpStreamingData(); Flux<UserCapped>
	 * userFlux = webTestClient.get().uri("/users/events").exchange()
	 * .expectStatus().isOk() .returnResult(UserCapped.class) .getResponseBody()
	 * .take(5); StepVerifier.create(userFlux) .expectNextCount(5)
	 * .verifyComplete(); }
	 * 
	 * private void setUpStreamingData(){
	 * mongoOperations.dropCollection(UserCapped.class);
	 * mongoOperations.createCollection(UserCapped.class,
	 * CollectionOptions.empty().maxDocuments(20).size(50000).capped());
	 * Flux<UserCapped> userCappedFlux = Flux.interval(Duration.ofSeconds(1)) .map(i
	 * -> new UserCapped(null,"Stream User " + i,20,1000)).take(5);
	 * 
	 * userCappedRepository.insert(userCappedFlux) .doOnNext( item ->
	 * log.info("UserCapped Inserted from CommandLineRunner " + item)) .blockLast();
	 * }
	 * 
	 */
}
